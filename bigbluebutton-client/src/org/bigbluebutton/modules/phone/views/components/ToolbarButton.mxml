<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:mate="http://mate.asfusion.com/"
           styleName="voiceConfDefaultButtonStyle" click="startPhone()"
	mouseOver = "mouseOverHandler(event)"
	mouseOut = "mouseOutHandler(event)"
	creationComplete="onCreationComplete()"
	height="24"
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent">

  <mate:Listener type="{FlashLeftVoiceConferenceEvent.LEFT_VOICE_CONFERENCE}" method="handleFlashLeftVoiceConferenceEvent" />
  <mate:Listener type="{FlashJoinedVoiceConferenceEvent.JOINED_VOICE_CONFERENCE}" method="handleFlashJoinedVoiceConferenceEvent" />
  <mate:Listener type="{FlashJoinedListenOnlyVoiceConferenceEvent.JOINED_LISTEN_ONLY_VOICE_CONFERENCE}" method="handleFlashJoinedListenOnlyConferenceEvent" />
  <mate:Listener type="{FlashEchoTestStoppedEvent.ECHO_TEST_STOPPED}" method="handleStopEchoTestEvent" />
  <mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStartedEvent" />
  <mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_ENDED}" method="handleWebRTCCallEndedEvent" />
  <mate:Listener type="{AudioSelectionWindowEvent.CLOSED_AUDIO_SELECTION}" method="handleClosedAudioSelectionWindowEvent" />
  
	<mx:Script>
		<![CDATA[
      import com.asfusion.mate.events.Dispatcher;     
      import flash.system.Security;
      import flash.system.SecurityPanel;     
      import org.bigbluebutton.common.LogUtil;
      import org.bigbluebutton.core.BBB;
      import org.bigbluebutton.main.api.JSLog;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.views.MainToolbar;
      import org.bigbluebutton.modules.phone.PhoneOptions;
      import org.bigbluebutton.modules.phone.events.AudioSelectionWindowEvent;
      import org.bigbluebutton.modules.phone.events.FlashEchoTestStoppedEvent;
      import org.bigbluebutton.modules.phone.events.FlashJoinedListenOnlyVoiceConferenceEvent;
      import org.bigbluebutton.modules.phone.events.FlashJoinedVoiceConferenceEvent;
      import org.bigbluebutton.modules.phone.events.FlashLeftVoiceConferenceEvent;
      import org.bigbluebutton.modules.phone.events.FlashStopEchoTestCommand;
      import org.bigbluebutton.modules.phone.events.JoinVoiceConferenceCommand;
      import org.bigbluebutton.modules.phone.events.LeaveVoiceConferenceCommand;
      import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
      import org.bigbluebutton.modules.phone.views.assets.Images;
      import org.bigbluebutton.util.i18n.ResourceUtil;
			
      private static const LOG:String = "Phone::ToolbarButton - ";
      
			private var dispatcher:Dispatcher = new Dispatcher();
			private var mic:Microphone;
			
			public const DEFAULT_STATE:Number = 0;
			public const ACTIVE_STATE:Number = 1;
			private var _currentState:Number = DEFAULT_STATE;
			
			[Bindable] public var phoneOptions:PhoneOptions = new PhoneOptions();
			
			private function startPhone():void {
				trace(LOG + "startPhone 1 enabled=[" + enabled + "] selected=[" + selected + "]");
        JSLog.debug(LOG + "startPhone 1 enabled=[" + enabled + "] selected=[" + selected + "]");
				// Disable the button right away to prevent the user from clicking
				// multiple times.
				this.enabled = false;
				trace(LOG + "startPhone 2 enabled=[" + enabled + "] selected=[" + selected + "]");
        JSLog.debug(LOG + "startPhone 2 enabled=[" + enabled + "] selected=[" + selected + "]");
				if (this.selected) {
					if (defaultListenOnlyMode) {
						dispatcher.dispatchEvent(new LeaveVoiceConferenceCommand());

						trace(LOG + "Sending Join Conference command");
						JSLog.debug(LOG + "Sending Join Conference command");
						var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
						command.mic = true;
						dispatcher.dispatchEvent(command);
					} else {
						trace(LOG + "Sending Show Audio Selection command");
						JSLog.debug(LOG + "Sending Show Audio Selection command");
						dispatcher.dispatchEvent(new AudioSelectionWindowEvent(AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION));
					}
				} else {
					trace(LOG + "Sending Leave Conference command");
          JSLog.debug(LOG + "Sending Leave Conference command");
					dispatcher.dispatchEvent(new LeaveVoiceConferenceCommand());
				}				
			}

			private function get defaultListenOnlyMode():Boolean {
				return (phoneOptions.listenOnlyMode && phoneOptions.forceListenOnly);
			}
			
			public function remoteClick(event:ShortcutEvent):void{
				this.selected = true;
				startPhone();
			}
			
			
			private function mouseOverHandler(event:MouseEvent):void {
				if(_currentState == ACTIVE_STATE)
          this.styleName = "voiceConfInactiveButtonStyle";
				else
          this.styleName = "voiceConfActiveButtonStyle"; 			
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(_currentState == ACTIVE_STATE)
          this.styleName = "voiceConfActiveButtonStyle";
				else
          this.styleName = "voiceConfDefaultButtonStyle";			
			}
			
			private function onCreationComplete():void {
				// when the button is added to the stage display the audio selection window if auto join is true
				if (phoneOptions.autoJoin) {
          if (defaultListenOnlyMode) {
            var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
            command.mic = true;
            dispatcher.dispatchEvent(command);            
          } else {
            trace(LOG + "Sending Show Audio Selection command");
            JSLog.debug(LOG + "Sending Show Audio Selection command");
            dispatcher.dispatchEvent(new AudioSelectionWindowEvent(AudioSelectionWindowEvent.SHOW_AUDIO_SELECTION));            
          }
				} else {
					joinDefaultListenOnlyMode();
				}
			}

      private function onUserJoinedConference():void {
        PhoneOptions.firstAudioJoin = false;

        this.selected = true;
        this.enabled = true;

        JSLog.debug(LOG + "onUserJoinedConference enabled=[" + enabled + "] selected=[" + selected + "]");
        trace(LOG + "onUserJoinedConference enabled=[" + enabled + "] selected=[" + selected + "]");
        _currentState = ACTIVE_STATE;
        this.styleName = "voiceConfActiveButtonStyle";
        this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.stop');	        
      }
      
      private function onUserJoinedListenOnlyConference():void {
        JSLog.debug(LOG + "onUserJoinedListenOnlyConference enabled=[" + enabled + "] selected=[" + selected + "]");
        trace(LOG + "onUserJoinedListenOnlyConference enabled=[" + enabled + "] selected=[" + selected + "]");

        resetButtonState();
      }
      
      private function onUserLeftConference():void {
        this.selected = false;
        this.enabled = true;
        trace(LOG + "onUserLeftConference enabled=[" + enabled + "] selected=[" + selected + "]");
        JSLog.debug(LOG + "onUserLeftConference enabled=[" + enabled + "] selected=[" + selected + "]");
        _currentState = DEFAULT_STATE;
        this.styleName = "voiceConfDefaultButtonStyle";
        this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');    
        JSLog.debug(LOG + "onUserLeftConference enabled=[" + enabled + "] selected=[" + selected + "]");
      }

      private function joinDefaultListenOnlyMode(micLeft:Boolean = true):void {
        if (defaultListenOnlyMode && micLeft) {
          var command:JoinVoiceConferenceCommand = new JoinVoiceConferenceCommand();
          command.mic = false;
          dispatcher.dispatchEvent(command);
        }
      }
      
      private function handleFlashJoinedVoiceConferenceEvent(event:FlashJoinedVoiceConferenceEvent):void {
        trace(LOG + "User has joined the conference using flash");
        JSLog.debug(LOG + "User has joined the conference using flash");
        onUserJoinedConference();
      }
      	
      private function handleFlashJoinedListenOnlyConferenceEvent(event:FlashJoinedListenOnlyVoiceConferenceEvent):void {
        trace(LOG + "User has joined the listen only conference using flash");
        JSLog.debug(LOG + "User has joined the listen only conference using flash");
        if (defaultListenOnlyMode) {
          onUserJoinedListenOnlyConference();
        } else {
          onUserJoinedConference();
        }
      }
      
      private function handleFlashLeftVoiceConferenceEvent(event:FlashLeftVoiceConferenceEvent):void {
        trace(LOG + "User has left the conference using flash");
        JSLog.debug(LOG + "User has left the conference using flash");
        var micLeft:Boolean = (_currentState == ACTIVE_STATE);
        onUserLeftConference();
        joinDefaultListenOnlyMode(micLeft);
      }
      
      private function handleWebRTCCallStartedEvent(event: WebRTCCallEvent):void {
        JSLog.debug(LOG + "User has joined the conference using webrtc");
        trace(LOG + "User has joined the conference using webrtc");
        onUserJoinedConference();
      }
						
			private function handleWebRTCCallEndedEvent(event:WebRTCCallEvent):void {
        JSLog.debug(LOG + "User has left the conference using webrtc");
        trace(LOG + "User has left the conference using webrtc");
        onUserLeftConference();
        joinDefaultListenOnlyMode();
			}
      
      private function handleStopEchoTestEvent(event:Event):void {
        resetButtonState();
        joinDefaultListenOnlyMode();
      }
      
      private function resetButtonState():void {
        this.selected = false;
        this.enabled = true;
        _currentState = DEFAULT_STATE;
        this.styleName = "voiceConfDefaultButtonStyle";
        this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
      }
			
			private function handleClosedAudioSelectionWindowEvent(event:AudioSelectionWindowEvent):void {
				this.selected = false;
				this.enabled = true;
        JSLog.debug(LOG + "onClosedAudioSelection enabled=[" + enabled + "] selected=[" + selected + "]");
        trace(LOG + "onClosedAudioSelection enabled=[" + enabled + "] selected=[" + selected + "]");
				_currentState = DEFAULT_STATE;
        this.styleName = "voiceConfDefaultButtonStyle";
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
				joinDefaultListenOnlyMode();
			}
				
			//For whatever reason the tooltip does not update when localization is changed dynamically. Overrideing it here
			override protected function resourcesChanged():void {
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}
			
			public function theory():String{
				return "Audio button";
			}
			
			private function joinVoiceFocusHead(e:BBBEvent):void{
				this.setFocus();
			}
		]]>
	</mx:Script>
</mx:Button>
