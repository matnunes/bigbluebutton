<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<CustomMdiWindow xmlns="org.bigbluebutton.common.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:views="org.bigbluebutton.modules.deskshare.view.components.*"
	width="600" height="400"
	initialize="init()"
	creationComplete="onCreationComplete()"
	implements="org.bigbluebutton.common.IBbbModuleWindow"
	xmlns:mate="http://mate.asfusion.com/"
	title="{ResourceUtil.getInstance().getString('bbb.desktopView.title')}" 
	showCloseButton="false"
	resize="onResizeEvent()"
	layout="absolute" >
	
	<mate:Listener type="{ViewStreamEvent.STOP}" method="onStopViewStreamEvent" />
	<mate:Listener type="{CursorEvent.UPDATE_CURSOR_LOC_EVENT}" method="onUpdateCursorEvent" />
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
		
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;			
			import flash.sampler.NewObjectSample;			
			import flexlib.mdi.events.MDIWindowEvent;
			import mx.core.UIComponent;			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.deskshare.events.CursorEvent;
			import org.bigbluebutton.modules.deskshare.events.StartedViewingEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewStreamEvent;
			import org.bigbluebutton.modules.deskshare.events.ViewWindowEvent;
			import org.bigbluebutton.modules.deskshare.model.DeskshareOptions;
			import org.bigbluebutton.modules.deskshare.managers.SmartWindowResizer;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private var images:Images = new Images();
			
			private var cursor:Shape;
			
			private var video:Video;
			private var ns:NetStream;
			private var videoHolder:UIComponent = new UIComponent();
			private var stream:String;
			private var videoHeight:Number;
			private var videoWidth:Number;
			
			[Bindable] private var actualSize:Boolean = false;

			// The following code block is to deal with a bug in FLexLib 
			// with MDI windows not responding well to being maximized
			private var savedWindowWidth:Number;
			private var savedWindowHeight:Number;
			private var savedX:Number;
			private var savedY:Number;
			private var isMaximized:Boolean = false;
			private var resizer:SmartWindowResizer = new SmartWindowResizer();
			
			[Bindable] private var baseIndex:int;
			[Bindable] private var dsOptions:DeskshareOptions;
									
			private function init():void{
				dsOptions = new DeskshareOptions();
				baseIndex = dsOptions.baseTabIndex;
			}
									
			private function onCreationComplete():void{
				videoHolderCanvas.addChild(videoHolder);
				videoHolder.percentWidth = 100;
				videoHolder.percentHeight = 100;
				addEventListener(MDIWindowEvent.RESIZE_START, onResizeStartEvent);
				addEventListener(MDIWindowEvent.RESIZE_END, onResizeEndEvent);
				cursor = new Shape();
				cursor.graphics.lineStyle(6, 0xFF0000, 0.6);
				cursor.graphics.drawCircle(0,0,3);
				videoHolder.addChild(cursor);
				videoHolder.addChild(cursorImg);
				cursor.visible = false;
				
				resourcesChanged();
				
				titleBarOverlay.tabIndex = baseIndex;
				minimizeBtn.tabIndex = baseIndex+1;
				maximizeRestoreBtn.tabIndex = baseIndex+2;
				closeBtn.tabIndex = baseIndex+3;

				bottomBar.registerListeners(this);
				onResizeEvent();
			}
			
			private function onResizeStartEvent(event:MDIWindowEvent):void {
				if (event.window == this) {
					resizer.onResizeStart();
				}
			}

			private function onResizeEndEvent(event:MDIWindowEvent):void {
				if (event.window == this) {
					resizer.onResizeEnd();
				}
			}

			private function onResizeEvent():void {
				if (this.minimized) {
					return;
				}

				if (actualSize) {
					onResizeCallback(this.width - horizontalBorder, this.height - verticalBorder, videoWidth, videoHeight, Math.max((this.width - horizontalBorder - videoWidth) / 2, 0), Math.max((this.height - verticalBorder - videoHeight) / 2, 0));
				} else {
					resizer.onResize(this.width - horizontalBorder, this.height - verticalBorder, this.maximized, video.width, video.height, videoWidth / videoHeight, false, onResizeCallback);
				}
			}

			private function onResizeCallback(externalWidth:int, externalHeight:int, internalWidth:int, internalHeight:int, internalOffsetX:int, internalOffsetY:int):void {
				this.width = externalWidth + horizontalBorder;
				this.height = externalHeight + verticalBorder;

				/* Reposition video within window */
				videoHolder.x = internalOffsetX;
				videoHolder.y = internalOffsetY;

				videoHolder.width = video.width = internalWidth;
				videoHolder.height = video.height = internalHeight;
			}

			protected function get verticalBorder():Number {
				return this.borderMetrics.top + this.borderMetrics.bottom;
			}
			
			protected function get horizontalBorder():Number {
				return this.borderMetrics.left + this.borderMetrics.right;
			}

			private function onUpdateCursorEvent(event:CursorEvent):void {	
				cursor.x = ((event.x/videoWidth)) * video.width;
				cursor.y = ((event.y/videoHeight)) * video.height;
			
				cursorImg.visible = true;
                // DO NOT compute the x and y coordinate and assign directly to the cursorImg
                // as it results in a flickering and jerky mouse pointer (ralam jun 10, 2010).
                if (cursor.x < video.x) cursor.x = video.x;
                if (cursor.y < video.y) cursor.y = video.y;
                if (cursor.x > video.x + video.width) cursor.x = video.x + video.width;
                if (cursor.y > video.y + video.height) cursor.y = video.y + video.height;
                cursorImg.move(cursor.x, cursor.y);
			}
			
			public function startVideo(connection:NetConnection, stream:String, width:Number, height:Number):void{
				this.videoWidth = width;
				this.videoHeight = height;
				
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				
				video = new Video(width, height);
				video.width = width;
				video.height = height;
        video.smoothing = true;
				video.attachNetStream(ns);
				ns.play(stream);	
				this.stream = stream;
				this.title = "Viewing Remote Desktop";
       
				videoHolder.addChild(video);
				onResizeEvent();
			}
			
			public function stopViewing():void {
				ns.close();
				closeWindow();				
			}
			
			private function onStopViewStreamEvent(event:ViewStreamEvent):void {
				LogUtil.debug("onStopViewStreamEvent(event:ViewStreamEvent)");
				stopViewing();
			}
						
			private function onAsyncError(e:AsyncErrorEvent):void{
				LogUtil.debug("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				LogUtil.debug("=====> onNetStatus(e:NetStatusEvent) -DesktopPublishWindow " + e.info.code);
				switch(e.info.code){
				case "NetStream.Play.Start":
					LogUtil.debug("NetStream.Publish.Start for broadcast stream " + stream);
					LogUtil.debug("Dispatching start viewing event");
					var dispatcher: Dispatcher  = new Dispatcher();
        			var viewEvent:StartedViewingEvent = new StartedViewingEvent(StartedViewingEvent.STARTED_VIEWING_EVENT);
        			viewEvent.stream = stream;
					dispatcher.dispatchEvent(viewEvent);
					break;
				case "NetStream.Play.UnpublishNotify":
					LogUtil.debug("NetStream.Play.UnpublishNotify for broadcast stream " + stream);
					stopViewing();
					break;
				}
			}
			
			public function getPrefferedPosition():String{
				return MainCanvas.DESKTOP_SHARING_VIEW;
			}
			
			private function toggleActualSize():void {
				actualSize = !actualSize;
				onResizeEvent();
			}
			
			private function closeWindow():void {
				dispatchEvent(new ViewWindowEvent(ViewWindowEvent.CLOSE));
			}
			
			override protected function resourcesChanged():void{
				super.resourcesChanged();
				this.title = ResourceUtil.getInstance().getString('bbb.desktopView.title');
				
				if (windowControls != null) {
					minimizeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.minimizeBtn.toolTip");
					minimizeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopView.minimizeBtn.accessibilityName");

					maximizeRestoreBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.maximizeRestoreBtn.toolTip");
					maximizeRestoreBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopView.maximizeRestoreBtn.accessibilityName");

					closeBtn.toolTip = ResourceUtil.getInstance().getString("bbb.window.closeBtn.toolTip");
					closeBtn.accessibilityName = ResourceUtil.getInstance().getString("bbb.desktopView.closeBtn.accessibilityName");
				}
			}
			
			private function localeChanged(e:Event):void{
				resourcesChanged();
			}
			
		]]>
	</mx:Script>
	<mx:Image id="cursorImg" visible="false" source="@Embed('../../assets/images/cursor4.png')"/>
	
	<mx:Canvas width="100%" height="100%" id="videoHolderCanvas" />

	<views:DesktopViewToolbar x="0" y="{videoHolderCanvas.height - bottomBar.height - 16}" id="bottomBar" height="28" width="100%" >
		<mx:Button id="btnActualSize" paddingTop="0" paddingBottom="0" styleName="deskshareControlButtonStyle"
				   click="toggleActualSize()" 
				   height="28" 
				   label="{actualSize ? ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.desktopView.actualSize')}"
				   toolTip="{actualSize ? ResourceUtil.getInstance().getString('bbb.desktopView.fitToWindow') : ResourceUtil.getInstance().getString('bbb.desktopView.actualSize')}"
				   tabIndex="{baseIndex+4}"/>
	</views:DesktopViewToolbar>
</CustomMdiWindow>
