<?xml version="1.0" encoding="utf-8"?>

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:mate="http://mate.asfusion.com/"
		   initialize="init()"
		   creationComplete="onCreationComplete()"
		   visible="{toolbarVisible}"
		   horizontalAlign="center"
		   verticalAlign="middle"
		   paddingTop="0" paddingBottom="0" 
		   hideEffect="{fadeOut}" showEffect="{fadeIn}" >
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import com.asfusion.mate.events.Dispatcher;

			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			[Bindable] private var toolbarVisible:Boolean = false;

			private var globalDispatcher:Dispatcher;
			private var _toolbarHideTimer:Timer;

			public function init():void{
				_toolbarHideTimer = new Timer(1000, 1);
				_toolbarHideTimer.addEventListener(TimerEvent.TIMER, onHideTimerComplete);
			}

			private function onCreationComplete():void {
				globalDispatcher = new Dispatcher();
			}

			private function handleMouseOver(e:MouseEvent = null):void {
				showToolbar();
			}

			private function handleMouseOut(e:MouseEvent = null):void {
				hideToolbar();
			}
			
			private function onHideTimerComplete(event:TimerEvent):void {
				toolbarVisible = false;
			}
			
			private function showToolbar():void {
				_toolbarHideTimer.reset();
				toolbarVisible = toolbarAllowed;
			}
			
			private function hideToolbar():void {
				_toolbarHideTimer.reset();
				_toolbarHideTimer.start();
			}

			private function get toolbarAllowed():Boolean {
				// Created to make possible to create rules to allow or not the toolbar
				return true;
			}

			public function registerListeners(component:UIComponent):void {
				component.addEventListener(MouseEvent.MOUSE_OVER, handleMouseOver);
				component.addEventListener(MouseEvent.MOUSE_OUT, handleMouseOut);
			}
		]]>
	</mx:Script>

	<mx:Fade id="fadeOut" duration="200" alphaFrom="1.0" alphaTo="0.0" />
	<mx:Fade id="fadeIn" duration="200" alphaFrom="0.0" alphaTo="1.0" />
</mx:HBox>
